dans mon application LMS next js 15 utilisant types script et tailwind

//@/lib/prisma/ts
import { PrismaClient } from '@prisma/client';

const globalForPrisma = global as unknown as { prisma: PrismaClient };

const prisma =
  globalForPrisma.prisma ||
  new PrismaClient({
    log: ['query', 'info', 'warn', 'error'],
  });

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;

export default prisma;


shema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèles pour les tutos
model User {
  id            Int          @id @default(autoincrement())
  name          String?      @db.VarChar(255)
  email         String       @unique @db.VarChar(255)
  password      String       @db.VarChar(255)
  role          Role         @default(STUDENT)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  enrollments   Enrollment[]
  tutos         Tuto[]
  progresses    Progress[]
  sessions      Session[]    @relation("TrainerSessions")
}

model Tuto {
  id            Int          @id @default(autoincrement())
  title         String       @db.VarChar(255)
  description   String?      @db.VarChar(500)
  slug          String?       @unique @db.VarChar(255)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  authorId      Int
  author        User         @relation(fields: [authorId], references: [id])
  chapters      Chapter[]
  enrollments   Enrollment[]

  @@index([slug])
}

model Chapter {
  id            Int          @id @default(autoincrement())
  title         String       @db.VarChar(255)
  objective     String?      @db.VarChar(500)
  order         Int
  tutoId        Int
  tuto          Tuto         @relation(fields: [tutoId], references: [id], onDelete: Cascade)
  sections      Section[]
  progresses    Progress[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([order])
}

model Section {
  id            Int          @id @default(autoincrement())
  title         String       @db.VarChar(255)
  order         Int
  chapterId     Int
  chapter       Chapter      @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  paragraphs    Paragraph[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([order])
}

model Paragraph {
  id            Int          @id @default(autoincrement())
  type          ParagraphType
  content       String       @db.VarChar(1000)
  sectionId     Int
  section       Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Enrollment {
  id            Int          @id @default(autoincrement())
  userId        Int
  user          User         @relation(fields: [userId], references: [id])
  tutoId        Int
  tuto          Tuto         @relation(fields: [tutoId], references: [id])
  enrolledAt    DateTime     @default(now())
  progress      Progress[]   @relation("EnrollmentProgress")
}

je veux créer un tuto.
écris les scripts de :
@/utils/tuto/tutoService.ts
@/app/author/tuto/pages.tsx
@/app/author/tuto/[id]/pages.tsx
@/app/api/tuto/route.ts
@/app/api/tuto/[id]/route.ts
@/components/tuto/TutoForm.tsx
@/components/tuto/TutoList.tsx

