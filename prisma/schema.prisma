// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèles pour les tutos
model User {
  id            Int          @id @default(autoincrement())
  name          String?      @db.VarChar(255)
  email         String       @unique @db.VarChar(255)
  password      String       @db.VarChar(255)
  role          Role         @default(STUDENT)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  enrollments   Enrollment[]
  tutos         Tuto[]
  progresses    Progress[]
  sessions      Session[]    @relation("TrainerSessions")
}

model Tuto {
  id            Int          @id @default(autoincrement())
  title         String       @db.VarChar(255)
  description   String?      @db.VarChar(500)
  slug          String?       @unique @db.VarChar(255)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  authorId      Int
  author        User         @relation(fields: [authorId], references: [id])
  chapters      Chapter[]
  enrollments   Enrollment[]

  @@index([slug])
}

model Chapter {
  id            Int          @id @default(autoincrement())
  title         String       @db.VarChar(255)
  objective     String?      @db.VarChar(500)
  order         Int
  tutoId        Int
  tuto          Tuto         @relation(fields: [tutoId], references: [id], onDelete: Cascade)
  sections      Section[]
  progresses    Progress[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([order])
}

model Section {
  id            Int          @id @default(autoincrement())
  title         String       @db.VarChar(255)
  order         Int
  chapterId     Int
  chapter       Chapter      @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  paragraphs    Paragraph[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([order])
}

model Paragraph {
  id            Int          @id @default(autoincrement())
  type          ParagraphType
  content       String       @db.VarChar(1000)
  sectionId     Int
  section       Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Enrollment {
  id            Int          @id @default(autoincrement())
  userId        Int
  user          User         @relation(fields: [userId], references: [id])
  tutoId        Int
  tuto          Tuto         @relation(fields: [tutoId], references: [id])
  enrolledAt    DateTime     @default(now())
  progress      Progress[]   @relation("EnrollmentProgress")
}

model Progress {
  id            Int          @id @default(autoincrement())
  userId        Int
  user          User         @relation(fields: [userId], references: [id])
  chapterId     Int
  chapter       Chapter      @relation(fields: [chapterId], references: [id])
  enrollmentId  Int
  enrollment    Enrollment   @relation("EnrollmentProgress", fields: [enrollmentId], references: [id])
  completed     Boolean      @default(false)
  completedAt   DateTime?
}

enum Role {
  STUDENT
  AUTHOR
  TRAINER
  ADMIN
}

enum ParagraphType {
  TEXT
  IMAGE
  CODE
}

// Modèles pour les sessions de formation
model Session {
  id              Int          @id @default(autoincrement())
  UserId          Int
  trainer         User         @relation(fields: [UserId], references: [id], name: "TrainerSessions")
  participants    Participant[] @relation("ParticipatedSessions")
  startDate       DateTime
  endDate         DateTime
  trainingDates   DateTime[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Training {
  id              Int          @id @default(autoincrement())
  title           String       @db.VarChar(255) 
  ref             String       @db.VarChar(255)
  description     String       @db.VarChar(500) 
  prerequis       String       @db.VarChar(500) 
  technologyId    Int
  technology      Technology   @relation(fields: [technologyId], references: [id]) 
  organizerId     Int
  organizer       Center       @relation(fields: [organizerId], references: [id])
  author          String
  durationDays    Int
  durationHours   Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Center {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(255)
  trainings     Training[]   
}

model Participant {
  id            Int          @id @default(autoincrement())
  firstname     String       @db.VarChar(255)
  lastname      String       @db.VarChar(255)
  sessions      Session[]    @relation("ParticipatedSessions")
}

model Technology {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(255)
  trainings     Training[]   // Relation inverse avec Training
}


